{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tfsumpy: Effortless Terraform Plan Summaries Welcome to tfsumpy \u2014 the modern, Python-based CLI tool for summarizing and reviewing Terraform plan files. Instantly understand what will change in your infrastructure, catch surprises, and share clear, readable summaries with your team. \ud83d\ude80 Why tfsumpy? Instant Plan Summaries: See what will be created, updated, or destroyed at a glance. Multiple Output Formats: Console, Markdown, and JSON output for any use case. Template-Based Output: Consistent, customizable output formats. Sensitive Data Protection: Automatically redact secrets and sensitive values. Customizable: Configure redaction and output to fit your workflow. No Cloud Required: Runs locally, works with any Terraform JSON plan. \ud83d\udd25 Quick Start 1. Install pip install tfsumpy 2. Generate a Terraform plan JSON terraform plan -out = tfplan terraform show -json tfplan > plan.json 3. Summarize your plan tfsumpy plan.json \ud83d\udca1 Usage Scenarios Basic Summary tfsumpy plan.json Shows a concise summary of all resource changes. Detailed Attribute Changes tfsumpy plan.json --hide-changes = false See exactly which attributes will change for each resource. Full Resource Details tfsumpy plan.json --detailed Get a deep dive into every resource and its planned state. Output Formats Console Output (Default) tfsumpy plan.json Color-coded, human-readable output in your terminal. Markdown Output tfsumpy plan.json --output markdown > plan_summary.md Generates a beautiful Markdown summary, perfect for code reviews or documentation. JSON Output tfsumpy plan.json --output json > plan_summary.json Structured JSON output for integration with other tools or automation. Custom Redaction & Config tfsumpy plan.json --config myconfig.json Redact custom patterns or tweak output using a JSON config file. Debugging tfsumpy plan.json --debug Enables verbose logging for troubleshooting. \u2699\ufe0f Configuration Example Create a config.json to redact custom sensitive patterns: { \"sensitive_patterns\" : [ { \"pattern\" : \"password|secret|key\" , \"replacement\" : \"[REDACTED]\" } ] } \ud83d\udcda Documentation & API Plan Analysis : How tfsumpy analyzes your plans Configuration : Customizing output and redaction Advanced Usage : Output formats and more Analyzers API : Extend or integrate tfsumpy Reporters API : Custom output formats Models API : Data structures \ud83e\udd1d Contributing We welcome contributions! See our Contributing Guide to get started. \ud83d\udcdd License tfsumpy is released under the MIT License. See the LICENSE file for details. \ud83d\udea6 Project Status Status: Beta \u2014 Feedback and contributions are welcome!","title":"Home"},{"location":"#tfsumpy-effortless-terraform-plan-summaries","text":"Welcome to tfsumpy \u2014 the modern, Python-based CLI tool for summarizing and reviewing Terraform plan files. Instantly understand what will change in your infrastructure, catch surprises, and share clear, readable summaries with your team.","title":"tfsumpy: Effortless Terraform Plan Summaries"},{"location":"#why-tfsumpy","text":"Instant Plan Summaries: See what will be created, updated, or destroyed at a glance. Multiple Output Formats: Console, Markdown, and JSON output for any use case. Template-Based Output: Consistent, customizable output formats. Sensitive Data Protection: Automatically redact secrets and sensitive values. Customizable: Configure redaction and output to fit your workflow. No Cloud Required: Runs locally, works with any Terraform JSON plan.","title":"\ud83d\ude80 Why tfsumpy?"},{"location":"#quick-start","text":"","title":"\ud83d\udd25 Quick Start"},{"location":"#1-install","text":"pip install tfsumpy","title":"1. Install"},{"location":"#2-generate-a-terraform-plan-json","text":"terraform plan -out = tfplan terraform show -json tfplan > plan.json","title":"2. Generate a Terraform plan JSON"},{"location":"#3-summarize-your-plan","text":"tfsumpy plan.json","title":"3. Summarize your plan"},{"location":"#usage-scenarios","text":"","title":"\ud83d\udca1 Usage Scenarios"},{"location":"#basic-summary","text":"tfsumpy plan.json Shows a concise summary of all resource changes.","title":"Basic Summary"},{"location":"#detailed-attribute-changes","text":"tfsumpy plan.json --hide-changes = false See exactly which attributes will change for each resource.","title":"Detailed Attribute Changes"},{"location":"#full-resource-details","text":"tfsumpy plan.json --detailed Get a deep dive into every resource and its planned state.","title":"Full Resource Details"},{"location":"#output-formats","text":"","title":"Output Formats"},{"location":"#console-output-default","text":"tfsumpy plan.json Color-coded, human-readable output in your terminal.","title":"Console Output (Default)"},{"location":"#markdown-output","text":"tfsumpy plan.json --output markdown > plan_summary.md Generates a beautiful Markdown summary, perfect for code reviews or documentation.","title":"Markdown Output"},{"location":"#json-output","text":"tfsumpy plan.json --output json > plan_summary.json Structured JSON output for integration with other tools or automation.","title":"JSON Output"},{"location":"#custom-redaction-config","text":"tfsumpy plan.json --config myconfig.json Redact custom patterns or tweak output using a JSON config file.","title":"Custom Redaction &amp; Config"},{"location":"#debugging","text":"tfsumpy plan.json --debug Enables verbose logging for troubleshooting.","title":"Debugging"},{"location":"#configuration-example","text":"Create a config.json to redact custom sensitive patterns: { \"sensitive_patterns\" : [ { \"pattern\" : \"password|secret|key\" , \"replacement\" : \"[REDACTED]\" } ] }","title":"\u2699\ufe0f Configuration Example"},{"location":"#documentation-api","text":"Plan Analysis : How tfsumpy analyzes your plans Configuration : Customizing output and redaction Advanced Usage : Output formats and more Analyzers API : Extend or integrate tfsumpy Reporters API : Custom output formats Models API : Data structures","title":"\ud83d\udcda Documentation &amp; API"},{"location":"#contributing","text":"We welcome contributions! See our Contributing Guide to get started.","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"tfsumpy is released under the MIT License. See the LICENSE file for details.","title":"\ud83d\udcdd License"},{"location":"#project-status","text":"Status: Beta \u2014 Feedback and contributions are welcome!","title":"\ud83d\udea6 Project Status"},{"location":"contributing/","text":"Contributing to tfsumpy Getting Started Fork the repository Clone your fork: git clone https://github.com/your-username/tfsumpy.git Set up development environment: cd tfsumpy pip install -e \".[dev]\" Development Process Creating a Feature Branch git checkout -b feature/your-feature-name Running Tests pytest Running Linting pylint tfsumpy mypy tfsumpy Making Changes Write tests for your changes Implement your changes Ensure all tests pass Update documentation if needed Committing Changes git add . git commit -m \"Description of your changes\" git push origin feature/your-feature-name Pull Request Process Update the README.md with details of changes if needed Update the documentation if needed Ensure all tests pass Create a Pull Request with a clear description of changes Code Style Follow PEP 8 guidelines Use type hints Write docstrings for all public methods Keep functions focused and small Testing Write unit tests for new functionality Maintain test coverage above 80% Include integration tests where appropriate Documentation Update documentation for new features Include docstrings in code Update example usage in README.md Add type hints to function signatures","title":"Contributing"},{"location":"contributing/#contributing-to-tfsumpy","text":"","title":"Contributing to tfsumpy"},{"location":"contributing/#getting-started","text":"Fork the repository Clone your fork: git clone https://github.com/your-username/tfsumpy.git Set up development environment: cd tfsumpy pip install -e \".[dev]\"","title":"Getting Started"},{"location":"contributing/#development-process","text":"","title":"Development Process"},{"location":"contributing/#creating-a-feature-branch","text":"git checkout -b feature/your-feature-name","title":"Creating a Feature Branch"},{"location":"contributing/#running-tests","text":"pytest","title":"Running Tests"},{"location":"contributing/#running-linting","text":"pylint tfsumpy mypy tfsumpy","title":"Running Linting"},{"location":"contributing/#making-changes","text":"Write tests for your changes Implement your changes Ensure all tests pass Update documentation if needed","title":"Making Changes"},{"location":"contributing/#committing-changes","text":"git add . git commit -m \"Description of your changes\" git push origin feature/your-feature-name","title":"Committing Changes"},{"location":"contributing/#pull-request-process","text":"Update the README.md with details of changes if needed Update the documentation if needed Ensure all tests pass Create a Pull Request with a clear description of changes","title":"Pull Request Process"},{"location":"contributing/#code-style","text":"Follow PEP 8 guidelines Use type hints Write docstrings for all public methods Keep functions focused and small","title":"Code Style"},{"location":"contributing/#testing","text":"Write unit tests for new functionality Maintain test coverage above 80% Include integration tests where appropriate","title":"Testing"},{"location":"contributing/#documentation","text":"Update documentation for new features Include docstrings in code Update example usage in README.md Add type hints to function signatures","title":"Documentation"},{"location":"extending/","text":"Extending tfsumpy Overview tfsumpy is designed to be extensible. You can add your own analyzers (to interpret Terraform plans in new ways) and reporters (to output results in custom formats or destinations). This page shows how to build and register your own extensions. Custom Analyzers A custom analyzer lets you add new types of analysis to your Terraform plans. For example, you might want to: - Estimate costs - Enforce custom compliance rules - Detect drift or other organization-specific patterns Example: Cost Estimation Analyzer from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class CostAnalyzer ( AnalyzerInterface ): @property def category ( self ) -> str : return \"cost\" def analyze ( self , context , ** kwargs ) -> AnalyzerResult : # Your custom cost analysis logic here cost_summary = { \"total_cost\" : 123.45 } return AnalyzerResult ( category = \"cost\" , data = cost_summary ) Register your analyzer: context . register_analyzer ( CostAnalyzer ()) Custom Reporters A custom reporter lets you control how results are displayed or sent elsewhere. For example, you might want to: - Send results to Slack or email - Output as HTML, JSON, or other formats - Integrate with dashboards or ticketing systems Example: Slack Reporter from tfsumpy.reporter import ReporterInterface def send_to_slack ( message ): # Implement your Slack integration here pass class SlackReporter ( ReporterInterface ): @property def category ( self ) -> str : return \"plan\" # or \"cost\" for your custom analyzer def print_report ( self , data , ** kwargs ): # Format and send a message to Slack message = f \"Terraform Plan Summary: { data [ 'total_changes' ] } changes\" send_to_slack ( message ) Register your reporter: context . register_reporter ( SlackReporter ()) Using Your Extensions Once registered, your custom analyzers and reporters are used by the tfsumpy Context just like the built-in ones: context = Context () context . register_analyzer ( CostAnalyzer ()) context . register_reporter ( SlackReporter ()) # Run your custom analysis results = context . run_analyzers ( \"cost\" , plan_path = \"plan.json\" ) context . run_reports ( \"cost\" , results [ 0 ] . data ) Tips You can register multiple analyzers and reporters for the same category. Use the category property to control which analyzers/reporters are triggered for each type of analysis. See the API Reference and API Reference: Reporters for more details. Need More? If you have a use case not covered here, open an issue or contribute your extension to the project! Plugin System (Plug & Play) tfsumpy supports plug-and-play extensions via plugins. Plugins are Python files placed in a plugins/ directory (or a custom directory specified with --plugin-dir ). Each plugin should define a register(context) function that registers analyzers/reporters. tfsumpy will automatically load and register all plugins in the directory at startup. Example Plugin Create a file plugins/my_cost_plugin.py : from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class MyCostAnalyzer ( AnalyzerInterface ): @property def category ( self ): return \"cost\" def analyze ( self , context , ** kwargs ): return AnalyzerResult ( category = \"cost\" , data = { \"total_cost\" : 42 }) def register ( context ): context . register_analyzer ( MyCostAnalyzer ()) Using Plugins By default, tfsumpy loads plugins from the plugins/ directory in your project. You can specify a different directory with the --plugin-dir CLI flag: tfsumpy plan.json --plugin-dir my_plugins/ All plugins in the directory will be loaded and their analyzers/reporters registered automatically.","title":"Extending tfsumpy"},{"location":"extending/#extending-tfsumpy","text":"","title":"Extending tfsumpy"},{"location":"extending/#overview","text":"tfsumpy is designed to be extensible. You can add your own analyzers (to interpret Terraform plans in new ways) and reporters (to output results in custom formats or destinations). This page shows how to build and register your own extensions.","title":"Overview"},{"location":"extending/#custom-analyzers","text":"A custom analyzer lets you add new types of analysis to your Terraform plans. For example, you might want to: - Estimate costs - Enforce custom compliance rules - Detect drift or other organization-specific patterns","title":"Custom Analyzers"},{"location":"extending/#example-cost-estimation-analyzer","text":"from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class CostAnalyzer ( AnalyzerInterface ): @property def category ( self ) -> str : return \"cost\" def analyze ( self , context , ** kwargs ) -> AnalyzerResult : # Your custom cost analysis logic here cost_summary = { \"total_cost\" : 123.45 } return AnalyzerResult ( category = \"cost\" , data = cost_summary ) Register your analyzer: context . register_analyzer ( CostAnalyzer ())","title":"Example: Cost Estimation Analyzer"},{"location":"extending/#custom-reporters","text":"A custom reporter lets you control how results are displayed or sent elsewhere. For example, you might want to: - Send results to Slack or email - Output as HTML, JSON, or other formats - Integrate with dashboards or ticketing systems","title":"Custom Reporters"},{"location":"extending/#example-slack-reporter","text":"from tfsumpy.reporter import ReporterInterface def send_to_slack ( message ): # Implement your Slack integration here pass class SlackReporter ( ReporterInterface ): @property def category ( self ) -> str : return \"plan\" # or \"cost\" for your custom analyzer def print_report ( self , data , ** kwargs ): # Format and send a message to Slack message = f \"Terraform Plan Summary: { data [ 'total_changes' ] } changes\" send_to_slack ( message ) Register your reporter: context . register_reporter ( SlackReporter ())","title":"Example: Slack Reporter"},{"location":"extending/#using-your-extensions","text":"Once registered, your custom analyzers and reporters are used by the tfsumpy Context just like the built-in ones: context = Context () context . register_analyzer ( CostAnalyzer ()) context . register_reporter ( SlackReporter ()) # Run your custom analysis results = context . run_analyzers ( \"cost\" , plan_path = \"plan.json\" ) context . run_reports ( \"cost\" , results [ 0 ] . data )","title":"Using Your Extensions"},{"location":"extending/#tips","text":"You can register multiple analyzers and reporters for the same category. Use the category property to control which analyzers/reporters are triggered for each type of analysis. See the API Reference and API Reference: Reporters for more details.","title":"Tips"},{"location":"extending/#need-more","text":"If you have a use case not covered here, open an issue or contribute your extension to the project!","title":"Need More?"},{"location":"extending/#plugin-system-plug-play","text":"tfsumpy supports plug-and-play extensions via plugins. Plugins are Python files placed in a plugins/ directory (or a custom directory specified with --plugin-dir ). Each plugin should define a register(context) function that registers analyzers/reporters. tfsumpy will automatically load and register all plugins in the directory at startup.","title":"Plugin System (Plug &amp; Play)"},{"location":"extending/#example-plugin","text":"Create a file plugins/my_cost_plugin.py : from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class MyCostAnalyzer ( AnalyzerInterface ): @property def category ( self ): return \"cost\" def analyze ( self , context , ** kwargs ): return AnalyzerResult ( category = \"cost\" , data = { \"total_cost\" : 42 }) def register ( context ): context . register_analyzer ( MyCostAnalyzer ())","title":"Example Plugin"},{"location":"extending/#using-plugins","text":"By default, tfsumpy loads plugins from the plugins/ directory in your project. You can specify a different directory with the --plugin-dir CLI flag: tfsumpy plan.json --plugin-dir my_plugins/ All plugins in the directory will be loaded and their analyzers/reporters registered automatically.","title":"Using Plugins"},{"location":"api/analyzers/","text":"Analyzers API Reference Overview Analyzers in tfsumpy are responsible for processing and interpreting Terraform plan files. Each analyzer implements a specific type of analysis. The primary built-in analyzer is the PlanAnalyzer , which summarizes resource changes in a Terraform plan. Base Analyzer Interface All analyzers must implement the AnalyzerInterface : from abc import ABC , abstractmethod from tfsumpy.analyzer import AnalyzerResult class AnalyzerInterface ( ABC ): @property @abstractmethod def category ( self ) -> str : \"\"\"Return the analyzer category (e.g., 'plan').\"\"\" pass @abstractmethod def analyze ( self , context : 'Context' , ** kwargs ) -> AnalyzerResult : \"\"\" Perform analysis and return results. Args: context: The tfsumpy Context object **kwargs: Additional arguments (e.g., plan_path) Returns: AnalyzerResult: The result of the analysis \"\"\" pass PlanAnalyzer The PlanAnalyzer is the default analyzer for Terraform plan files. It parses the plan JSON and produces a summary of all resource changes. Example usage: from tfsumpy.plan.analyzer import PlanAnalyzer from tfsumpy.context import Context context = Context () plan_analyzer = PlanAnalyzer ( context ) result = plan_analyzer . analyze ( context , plan_path = \"plan.json\" ) print ( result . data [ \"total_changes\" ]) print ( result . data [ \"resources\" ]) # List of resource change dicts Parameters: - context : The tfsumpy Context object (handles config, redaction, etc.) - plan_path : Path to the Terraform plan JSON file Returns: - AnalyzerResult with a summary of changes, including: - total_changes : int - change_breakdown : dict (create/update/delete counts) - resources : list of resource change dicts Extending: Custom Analyzers You can create your own analyzer by subclassing AnalyzerInterface : from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class MyCustomAnalyzer ( AnalyzerInterface ): @property def category ( self ) -> str : return \"custom\" def analyze ( self , context , ** kwargs ) -> AnalyzerResult : # Custom analysis logic here return AnalyzerResult ( category = \"custom\" , data = { \"result\" : \"ok\" }) Register your custom analyzer with the tfsumpy Context to use it in your workflow. Notes All analyzers should return an AnalyzerResult . The PlanAnalyzer is the main entry point for plan file analysis. See the Models API for details on the data structures returned by analyzers.","title":"Analyzers"},{"location":"api/analyzers/#analyzers-api-reference","text":"","title":"Analyzers API Reference"},{"location":"api/analyzers/#overview","text":"Analyzers in tfsumpy are responsible for processing and interpreting Terraform plan files. Each analyzer implements a specific type of analysis. The primary built-in analyzer is the PlanAnalyzer , which summarizes resource changes in a Terraform plan.","title":"Overview"},{"location":"api/analyzers/#base-analyzer-interface","text":"All analyzers must implement the AnalyzerInterface : from abc import ABC , abstractmethod from tfsumpy.analyzer import AnalyzerResult class AnalyzerInterface ( ABC ): @property @abstractmethod def category ( self ) -> str : \"\"\"Return the analyzer category (e.g., 'plan').\"\"\" pass @abstractmethod def analyze ( self , context : 'Context' , ** kwargs ) -> AnalyzerResult : \"\"\" Perform analysis and return results. Args: context: The tfsumpy Context object **kwargs: Additional arguments (e.g., plan_path) Returns: AnalyzerResult: The result of the analysis \"\"\" pass","title":"Base Analyzer Interface"},{"location":"api/analyzers/#plananalyzer","text":"The PlanAnalyzer is the default analyzer for Terraform plan files. It parses the plan JSON and produces a summary of all resource changes. Example usage: from tfsumpy.plan.analyzer import PlanAnalyzer from tfsumpy.context import Context context = Context () plan_analyzer = PlanAnalyzer ( context ) result = plan_analyzer . analyze ( context , plan_path = \"plan.json\" ) print ( result . data [ \"total_changes\" ]) print ( result . data [ \"resources\" ]) # List of resource change dicts Parameters: - context : The tfsumpy Context object (handles config, redaction, etc.) - plan_path : Path to the Terraform plan JSON file Returns: - AnalyzerResult with a summary of changes, including: - total_changes : int - change_breakdown : dict (create/update/delete counts) - resources : list of resource change dicts","title":"PlanAnalyzer"},{"location":"api/analyzers/#extending-custom-analyzers","text":"You can create your own analyzer by subclassing AnalyzerInterface : from tfsumpy.analyzer import AnalyzerInterface , AnalyzerResult class MyCustomAnalyzer ( AnalyzerInterface ): @property def category ( self ) -> str : return \"custom\" def analyze ( self , context , ** kwargs ) -> AnalyzerResult : # Custom analysis logic here return AnalyzerResult ( category = \"custom\" , data = { \"result\" : \"ok\" }) Register your custom analyzer with the tfsumpy Context to use it in your workflow.","title":"Extending: Custom Analyzers"},{"location":"api/analyzers/#notes","text":"All analyzers should return an AnalyzerResult . The PlanAnalyzer is the main entry point for plan file analysis. See the Models API for details on the data structures returned by analyzers.","title":"Notes"},{"location":"api/models/","text":"Models API Reference Overview tfsumpy uses several data models to represent the results of plan analysis and reporting. Understanding these models is essential for extending tfsumpy or integrating it into other tools. ResourceChange Represents a single resource change in a Terraform plan. from dataclasses import dataclass from typing import Dict , List @dataclass class ResourceChange : action : str # 'create', 'update', or 'delete' resource_type : str # e.g., 'aws_s3_bucket' identifier : str # Resource address (e.g., 'aws_s3_bucket.my_bucket') changes : List [ str ] # List of changed attributes (optional/legacy) module : str = 'root' # Module path (e.g., 'root', 'network.vpc') before : Dict = None # State before the change after : Dict = None # State after the change Fields: - action : The type of change ('create', 'update', 'delete') - resource_type : The Terraform resource type - identifier : The resource address in the plan - changes : List of changed attributes (may be empty) - module : Module path (default 'root') - before : Dictionary of the resource's state before the change - after : Dictionary of the resource's state after the change AnalyzerResult Represents the result of an analyzer (e.g., PlanAnalyzer). from dataclasses import dataclass from typing import Any @dataclass class AnalyzerResult : category : str # e.g., 'plan' data : Any # Typically a dict with summary and resource changes Fields: - category : The analyzer category (e.g., 'plan') - data : The analysis result (usually a dict with summary and resource changes) Example: Using Models ResourceChange Example change = ResourceChange ( action = \"create\" , resource_type = \"aws_s3_bucket\" , identifier = \"my_bucket\" , changes = [ \"bucket_name\" , \"versioning\" ], before = {}, after = { \"bucket_name\" : \"new-bucket\" , \"versioning\" : True } ) AnalyzerResult Example result = AnalyzerResult ( category = \"plan\" , data = { \"total_changes\" : 1 , \"change_breakdown\" : { \"create\" : 1 , \"update\" : 0 , \"delete\" : 0 }, \"resources\" : [ change ] } ) Notes The data field in AnalyzerResult is typically a dictionary with keys like total_changes , change_breakdown , and resources (a list of ResourceChange objects or dicts). See the Analyzers API and Reporters API for how these models are used in practice.","title":"Models"},{"location":"api/models/#models-api-reference","text":"","title":"Models API Reference"},{"location":"api/models/#overview","text":"tfsumpy uses several data models to represent the results of plan analysis and reporting. Understanding these models is essential for extending tfsumpy or integrating it into other tools.","title":"Overview"},{"location":"api/models/#resourcechange","text":"Represents a single resource change in a Terraform plan. from dataclasses import dataclass from typing import Dict , List @dataclass class ResourceChange : action : str # 'create', 'update', or 'delete' resource_type : str # e.g., 'aws_s3_bucket' identifier : str # Resource address (e.g., 'aws_s3_bucket.my_bucket') changes : List [ str ] # List of changed attributes (optional/legacy) module : str = 'root' # Module path (e.g., 'root', 'network.vpc') before : Dict = None # State before the change after : Dict = None # State after the change Fields: - action : The type of change ('create', 'update', 'delete') - resource_type : The Terraform resource type - identifier : The resource address in the plan - changes : List of changed attributes (may be empty) - module : Module path (default 'root') - before : Dictionary of the resource's state before the change - after : Dictionary of the resource's state after the change","title":"ResourceChange"},{"location":"api/models/#analyzerresult","text":"Represents the result of an analyzer (e.g., PlanAnalyzer). from dataclasses import dataclass from typing import Any @dataclass class AnalyzerResult : category : str # e.g., 'plan' data : Any # Typically a dict with summary and resource changes Fields: - category : The analyzer category (e.g., 'plan') - data : The analysis result (usually a dict with summary and resource changes)","title":"AnalyzerResult"},{"location":"api/models/#example-using-models","text":"","title":"Example: Using Models"},{"location":"api/models/#resourcechange-example","text":"change = ResourceChange ( action = \"create\" , resource_type = \"aws_s3_bucket\" , identifier = \"my_bucket\" , changes = [ \"bucket_name\" , \"versioning\" ], before = {}, after = { \"bucket_name\" : \"new-bucket\" , \"versioning\" : True } )","title":"ResourceChange Example"},{"location":"api/models/#analyzerresult-example","text":"result = AnalyzerResult ( category = \"plan\" , data = { \"total_changes\" : 1 , \"change_breakdown\" : { \"create\" : 1 , \"update\" : 0 , \"delete\" : 0 }, \"resources\" : [ change ] } )","title":"AnalyzerResult Example"},{"location":"api/models/#notes","text":"The data field in AnalyzerResult is typically a dictionary with keys like total_changes , change_breakdown , and resources (a list of ResourceChange objects or dicts). See the Analyzers API and Reporters API for how these models are used in practice.","title":"Notes"},{"location":"api/reporters/","text":"Reporters API Reference Overview Reporters in tfsumpy are responsible for formatting and displaying the results of plan analysis. Each reporter implements a specific output format (e.g., CLI, Markdown, JSON). The primary built-in reporter is the PlanReporter , which provides multiple output formats for Terraform plan summaries. Base Reporter Interface All reporters must implement the ReporterInterface : from abc import ABC , abstractmethod class ReporterInterface ( ABC ): @property @abstractmethod def category ( self ) -> str : \"\"\"Return the reporter category (e.g., 'plan').\"\"\" pass @abstractmethod def print_report ( self , data : Any , ** kwargs ) -> None : \"\"\" Format and print the analysis results. Args: data: The analysis results (typically a dict) **kwargs: Additional display options (e.g., show_changes, show_details) \"\"\" pass PlanReporter The PlanReporter is the default reporter for plan summaries. It supports three output formats: - Console output (default) - Markdown output (template-based) - JSON output (structured) Example usage: from tfsumpy.plan.reporter import PlanReporter reporter = PlanReporter () # Console output reporter . print_report ( plan_results , show_changes = True ) # Markdown output reporter . print_report_markdown ( plan_results , show_changes = True ) # JSON output reporter . print_report_json ( plan_results , show_changes = True ) Parameters: - data : The analysis results (from PlanAnalyzer ) - show_changes : Show detailed attribute changes (bool) - show_details : Show full resource details (bool) Output Formats: Console Output: Color-coded text Human-readable format Interactive terminal display Markdown Output: Template-based formatting Summary statistics Resource changes Detailed information (if enabled) Timestamp and metadata JSON Output: Structured data format Metadata (timestamp, version) Summary statistics Resource changes Detailed information (if enabled) Analysis results (if available) Extending: Custom Reporters You can create your own reporter by subclassing ReporterInterface (optionally inheriting from BaseReporter for convenience): from tfsumpy.reporter import ReporterInterface from tfsumpy.reporters.base_reporter import BaseReporter class MyCustomReporter ( BaseReporter , ReporterInterface ): @property def category ( self ) -> str : return \"custom\" def print_report ( self , data : Any , ** kwargs ) -> None : # Custom formatting logic here self . _write ( \"My Custom Report \\n \" ) self . _write ( \"================= \\n \" ) # ... Register your custom reporter with the tfsumpy Context to use it in your workflow. Notes The PlanReporter supports three output formats: console, markdown, and JSON. You can direct output to a file or stream by passing a custom output to BaseReporter . Markdown output uses Jinja2 templates for consistent formatting. JSON output provides a structured format suitable for integration with other tools. See the Models API for details on the data structures passed to reporters.","title":"Reporters"},{"location":"api/reporters/#reporters-api-reference","text":"","title":"Reporters API Reference"},{"location":"api/reporters/#overview","text":"Reporters in tfsumpy are responsible for formatting and displaying the results of plan analysis. Each reporter implements a specific output format (e.g., CLI, Markdown, JSON). The primary built-in reporter is the PlanReporter , which provides multiple output formats for Terraform plan summaries.","title":"Overview"},{"location":"api/reporters/#base-reporter-interface","text":"All reporters must implement the ReporterInterface : from abc import ABC , abstractmethod class ReporterInterface ( ABC ): @property @abstractmethod def category ( self ) -> str : \"\"\"Return the reporter category (e.g., 'plan').\"\"\" pass @abstractmethod def print_report ( self , data : Any , ** kwargs ) -> None : \"\"\" Format and print the analysis results. Args: data: The analysis results (typically a dict) **kwargs: Additional display options (e.g., show_changes, show_details) \"\"\" pass","title":"Base Reporter Interface"},{"location":"api/reporters/#planreporter","text":"The PlanReporter is the default reporter for plan summaries. It supports three output formats: - Console output (default) - Markdown output (template-based) - JSON output (structured) Example usage: from tfsumpy.plan.reporter import PlanReporter reporter = PlanReporter () # Console output reporter . print_report ( plan_results , show_changes = True ) # Markdown output reporter . print_report_markdown ( plan_results , show_changes = True ) # JSON output reporter . print_report_json ( plan_results , show_changes = True ) Parameters: - data : The analysis results (from PlanAnalyzer ) - show_changes : Show detailed attribute changes (bool) - show_details : Show full resource details (bool) Output Formats: Console Output: Color-coded text Human-readable format Interactive terminal display Markdown Output: Template-based formatting Summary statistics Resource changes Detailed information (if enabled) Timestamp and metadata JSON Output: Structured data format Metadata (timestamp, version) Summary statistics Resource changes Detailed information (if enabled) Analysis results (if available)","title":"PlanReporter"},{"location":"api/reporters/#extending-custom-reporters","text":"You can create your own reporter by subclassing ReporterInterface (optionally inheriting from BaseReporter for convenience): from tfsumpy.reporter import ReporterInterface from tfsumpy.reporters.base_reporter import BaseReporter class MyCustomReporter ( BaseReporter , ReporterInterface ): @property def category ( self ) -> str : return \"custom\" def print_report ( self , data : Any , ** kwargs ) -> None : # Custom formatting logic here self . _write ( \"My Custom Report \\n \" ) self . _write ( \"================= \\n \" ) # ... Register your custom reporter with the tfsumpy Context to use it in your workflow.","title":"Extending: Custom Reporters"},{"location":"api/reporters/#notes","text":"The PlanReporter supports three output formats: console, markdown, and JSON. You can direct output to a file or stream by passing a custom output to BaseReporter . Markdown output uses Jinja2 templates for consistent formatting. JSON output provides a structured format suitable for integration with other tools. See the Models API for details on the data structures passed to reporters.","title":"Notes"},{"location":"features/plan_analysis/","text":"Plan Analysis Overview Plan analysis is the core feature of tfsumpy, providing detailed insights into Terraform infrastructure changes. Features Change Detection tfsumpy identifies three types of changes: Create : New resources being added Update : Modifications to existing resources Delete : Resources being removed Attribute Tracking For each resource change, tfsumpy tracks: Resource type and name Changed attributes Old and new values Dependencies Output Formats tfsumpy supports three output formats: Console Output (Default) Terraform Plan Analysis ====================== Total Changes: 3 Create: 1 Update: 1 Delete: 1 Markdown Output # Terraform Plan Analysis Generated: 2024-03-21 10:00:00 ## Summary - Total Changes: 3 - Create: 1 - Update: 1 - Delete: 1 ## Resource Changes ### Create - aws_s3_bucket.data_bucket - bucket: \"new-bucket\" - versioning_enabled: true ### Update - aws_instance.web_server - instance_type: \"t2.micro\" \u2192 \"t2.small\" - tags.environment: \"dev\" \u2192 \"staging\" JSON Output { \"metadata\" : { \"timestamp\" : \"2024-03-21T10:00:00Z\" , \"version\" : \"1.0.0\" }, \"summary\" : { \"total_changes\" : 3 , \"create\" : 1 , \"update\" : 1 , \"delete\" : 1 }, \"changes\" : { \"create\" : [ { \"type\" : \"aws_s3_bucket\" , \"name\" : \"data_bucket\" , \"attributes\" : { \"bucket\" : \"new-bucket\" , \"versioning_enabled\" : true } } ] } } Usage Examples Basic Summary tfsumpy plan.json Detailed Changes tfsumpy plan.json --hide-changes = false Resource Details tfsumpy plan.json --detailed Output Formats # Console output (default) tfsumpy plan.json # Markdown output tfsumpy plan.json --output markdown > plan_summary.md # JSON output tfsumpy plan.json --output json > plan_summary.json Note: The following options are deprecated and will be removed in a future version: - --changes \u2192 Use --hide-changes=false instead - --details \u2192 Use --detailed instead - --markdown \u2192 Use --output markdown instead","title":"Plan Analysis"},{"location":"features/plan_analysis/#plan-analysis","text":"","title":"Plan Analysis"},{"location":"features/plan_analysis/#overview","text":"Plan analysis is the core feature of tfsumpy, providing detailed insights into Terraform infrastructure changes.","title":"Overview"},{"location":"features/plan_analysis/#features","text":"","title":"Features"},{"location":"features/plan_analysis/#change-detection","text":"tfsumpy identifies three types of changes: Create : New resources being added Update : Modifications to existing resources Delete : Resources being removed","title":"Change Detection"},{"location":"features/plan_analysis/#attribute-tracking","text":"For each resource change, tfsumpy tracks: Resource type and name Changed attributes Old and new values Dependencies","title":"Attribute Tracking"},{"location":"features/plan_analysis/#output-formats","text":"tfsumpy supports three output formats:","title":"Output Formats"},{"location":"features/plan_analysis/#console-output-default","text":"Terraform Plan Analysis ====================== Total Changes: 3 Create: 1 Update: 1 Delete: 1","title":"Console Output (Default)"},{"location":"features/plan_analysis/#markdown-output","text":"# Terraform Plan Analysis Generated: 2024-03-21 10:00:00 ## Summary - Total Changes: 3 - Create: 1 - Update: 1 - Delete: 1 ## Resource Changes ### Create - aws_s3_bucket.data_bucket - bucket: \"new-bucket\" - versioning_enabled: true ### Update - aws_instance.web_server - instance_type: \"t2.micro\" \u2192 \"t2.small\" - tags.environment: \"dev\" \u2192 \"staging\"","title":"Markdown Output"},{"location":"features/plan_analysis/#json-output","text":"{ \"metadata\" : { \"timestamp\" : \"2024-03-21T10:00:00Z\" , \"version\" : \"1.0.0\" }, \"summary\" : { \"total_changes\" : 3 , \"create\" : 1 , \"update\" : 1 , \"delete\" : 1 }, \"changes\" : { \"create\" : [ { \"type\" : \"aws_s3_bucket\" , \"name\" : \"data_bucket\" , \"attributes\" : { \"bucket\" : \"new-bucket\" , \"versioning_enabled\" : true } } ] } }","title":"JSON Output"},{"location":"features/plan_analysis/#usage-examples","text":"","title":"Usage Examples"},{"location":"features/plan_analysis/#basic-summary","text":"tfsumpy plan.json","title":"Basic Summary"},{"location":"features/plan_analysis/#detailed-changes","text":"tfsumpy plan.json --hide-changes = false","title":"Detailed Changes"},{"location":"features/plan_analysis/#resource-details","text":"tfsumpy plan.json --detailed","title":"Resource Details"},{"location":"features/plan_analysis/#output-formats_1","text":"# Console output (default) tfsumpy plan.json # Markdown output tfsumpy plan.json --output markdown > plan_summary.md # JSON output tfsumpy plan.json --output json > plan_summary.json Note: The following options are deprecated and will be removed in a future version: - --changes \u2192 Use --hide-changes=false instead - --details \u2192 Use --detailed instead - --markdown \u2192 Use --output markdown instead","title":"Output Formats"},{"location":"usage/advanced_usage/","text":"Advanced Usage Output Formats tfsumpy supports three output formats, each designed for different use cases: Console Output (Default) tfsumpy plan.json Color-coded, human-readable output in your terminal. Perfect for quick reviews and local development. Markdown Output tfsumpy plan.json --output markdown > plan_summary.md Template-based Markdown output with: - Summary statistics - Resource changes - Detailed attribute changes (if enabled) - Timestamp and metadata JSON Output tfsumpy plan.json --output json > plan_summary.json Structured JSON output with: - Metadata (timestamp, version) - Summary statistics - Resource changes - Detailed information (if enabled) - Analysis results (if available) Using tfsumpy in CI/CD Integrate tfsumpy into your CI pipeline to automatically summarize Terraform changes in pull requests or deployments: # Example GitHub Actions step - name : Summarize Terraform Plan run : | terraform plan -out=tfplan terraform show -json tfplan > plan.json tfsumpy plan.json --output markdown > plan_summary.md Attach plan_summary.md to your PR or publish as a build artifact for easy review. For Code Review Generate a Markdown summary and paste it directly into your pull request description: tfsumpy plan.json --output markdown > plan_summary.md cat plan_summary.md For Compliance Snapshots Keep a record of planned infrastructure changes for audit or compliance: # Markdown format tfsumpy plan.json --output markdown > compliance/plan_ $( date +%Y%m%d ) .md # JSON format tfsumpy plan.json --output json > compliance/plan_ $( date +%Y%m%d ) .json Debug Mode For troubleshooting or detailed analysis: tfsumpy plan.json --debug This enables: - Verbose logging - Detailed error messages - Analysis process information Command Line Options Output Control --output or -o : Choose output format ( default , markdown , json ) --detailed : Show detailed resource information --hide-changes : Hide detailed attribute changes Deprecated Options The following options are deprecated and will be removed in a future version: - --changes \u2192 Use --hide-changes=false instead - --details \u2192 Use --detailed instead - --markdown \u2192 Use --output markdown instead Configuration --config : Path to configuration file --plugin-dir : Directory to load plugins from --debug : Enable debug logging Markdown Output (Beta) You can generate a Markdown summary of your Terraform plan with: tfsumpy plan.json --markdown > plan_summary.md This will create a Markdown file with: - A summary section - Sections for created, updated, and destroyed resources - JSON code blocks for each resource change For updates, both before and after states are shown. For creates and deletes, only the relevant state is shown. Note: Markdown output is a beta feature. Please report any issues or suggestions!","title":"Advanced Usage"},{"location":"usage/advanced_usage/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"usage/advanced_usage/#output-formats","text":"tfsumpy supports three output formats, each designed for different use cases:","title":"Output Formats"},{"location":"usage/advanced_usage/#console-output-default","text":"tfsumpy plan.json Color-coded, human-readable output in your terminal. Perfect for quick reviews and local development.","title":"Console Output (Default)"},{"location":"usage/advanced_usage/#markdown-output","text":"tfsumpy plan.json --output markdown > plan_summary.md Template-based Markdown output with: - Summary statistics - Resource changes - Detailed attribute changes (if enabled) - Timestamp and metadata","title":"Markdown Output"},{"location":"usage/advanced_usage/#json-output","text":"tfsumpy plan.json --output json > plan_summary.json Structured JSON output with: - Metadata (timestamp, version) - Summary statistics - Resource changes - Detailed information (if enabled) - Analysis results (if available)","title":"JSON Output"},{"location":"usage/advanced_usage/#using-tfsumpy-in-cicd","text":"Integrate tfsumpy into your CI pipeline to automatically summarize Terraform changes in pull requests or deployments: # Example GitHub Actions step - name : Summarize Terraform Plan run : | terraform plan -out=tfplan terraform show -json tfplan > plan.json tfsumpy plan.json --output markdown > plan_summary.md Attach plan_summary.md to your PR or publish as a build artifact for easy review.","title":"Using tfsumpy in CI/CD"},{"location":"usage/advanced_usage/#for-code-review","text":"Generate a Markdown summary and paste it directly into your pull request description: tfsumpy plan.json --output markdown > plan_summary.md cat plan_summary.md","title":"For Code Review"},{"location":"usage/advanced_usage/#for-compliance-snapshots","text":"Keep a record of planned infrastructure changes for audit or compliance: # Markdown format tfsumpy plan.json --output markdown > compliance/plan_ $( date +%Y%m%d ) .md # JSON format tfsumpy plan.json --output json > compliance/plan_ $( date +%Y%m%d ) .json","title":"For Compliance Snapshots"},{"location":"usage/advanced_usage/#debug-mode","text":"For troubleshooting or detailed analysis: tfsumpy plan.json --debug This enables: - Verbose logging - Detailed error messages - Analysis process information","title":"Debug Mode"},{"location":"usage/advanced_usage/#command-line-options","text":"","title":"Command Line Options"},{"location":"usage/advanced_usage/#output-control","text":"--output or -o : Choose output format ( default , markdown , json ) --detailed : Show detailed resource information --hide-changes : Hide detailed attribute changes","title":"Output Control"},{"location":"usage/advanced_usage/#deprecated-options","text":"The following options are deprecated and will be removed in a future version: - --changes \u2192 Use --hide-changes=false instead - --details \u2192 Use --detailed instead - --markdown \u2192 Use --output markdown instead","title":"Deprecated Options"},{"location":"usage/advanced_usage/#configuration","text":"--config : Path to configuration file --plugin-dir : Directory to load plugins from --debug : Enable debug logging","title":"Configuration"},{"location":"usage/advanced_usage/#markdown-output-beta","text":"You can generate a Markdown summary of your Terraform plan with: tfsumpy plan.json --markdown > plan_summary.md This will create a Markdown file with: - A summary section - Sections for created, updated, and destroyed resources - JSON code blocks for each resource change For updates, both before and after states are shown. For creates and deletes, only the relevant state is shown. Note: Markdown output is a beta feature. Please report any issues or suggestions!","title":"Markdown Output (Beta)"},{"location":"usage/configuration/","text":"Configuration Configuration File tfsumpy can be customized using a JSON configuration file. Create a file named config.json : { \"sensitive_patterns\" : [ { \"pattern\" : \"\\\\b(?:password|secret|key)\\\\b\" , \"replacement\" : \"[REDACTED]\" } ], \"risk_rules\" : { \"high\" : [ { \"pattern\" : \"\\\\bdelete\\\\b.*\\\\b(database|storage)\\\\b\" , \"message\" : \"Critical resource deletion\" } ] } } Configuration Options Sensitive Pattern Configuration The sensitive_patterns section defines patterns for redacting sensitive information: { \"sensitive_patterns\" : [ { \"pattern\" : \"pattern_regex\" , \"replacement\" : \"replacement_text\" , \"description\" : \"Optional description\" } ] } Risk Rules Configuration The risk_rules section defines patterns for identifying risky changes: { \"risk_rules\" : { \"high\" : [ { \"pattern\" : \"pattern_regex\" , \"message\" : \"Risk message\" , \"description\" : \"Optional description\" } ], \"medium\" : [], \"low\" : [] } } Using Custom Configuration Apply your configuration using the --config flag: tfsumpy plan.json --config path/to/config.json Environment Variables tfsumpy supports the following environment variables: TFSUMPY_CONFIG : Path to configuration file TFSUMPY_DEBUG : Enable debug mode (set to \"1\" or \"true\")","title":"Configuration"},{"location":"usage/configuration/#configuration","text":"","title":"Configuration"},{"location":"usage/configuration/#configuration-file","text":"tfsumpy can be customized using a JSON configuration file. Create a file named config.json : { \"sensitive_patterns\" : [ { \"pattern\" : \"\\\\b(?:password|secret|key)\\\\b\" , \"replacement\" : \"[REDACTED]\" } ], \"risk_rules\" : { \"high\" : [ { \"pattern\" : \"\\\\bdelete\\\\b.*\\\\b(database|storage)\\\\b\" , \"message\" : \"Critical resource deletion\" } ] } }","title":"Configuration File"},{"location":"usage/configuration/#configuration-options","text":"","title":"Configuration Options"},{"location":"usage/configuration/#sensitive-pattern-configuration","text":"The sensitive_patterns section defines patterns for redacting sensitive information: { \"sensitive_patterns\" : [ { \"pattern\" : \"pattern_regex\" , \"replacement\" : \"replacement_text\" , \"description\" : \"Optional description\" } ] }","title":"Sensitive Pattern Configuration"},{"location":"usage/configuration/#risk-rules-configuration","text":"The risk_rules section defines patterns for identifying risky changes: { \"risk_rules\" : { \"high\" : [ { \"pattern\" : \"pattern_regex\" , \"message\" : \"Risk message\" , \"description\" : \"Optional description\" } ], \"medium\" : [], \"low\" : [] } }","title":"Risk Rules Configuration"},{"location":"usage/configuration/#using-custom-configuration","text":"Apply your configuration using the --config flag: tfsumpy plan.json --config path/to/config.json","title":"Using Custom Configuration"},{"location":"usage/configuration/#environment-variables","text":"tfsumpy supports the following environment variables: TFSUMPY_CONFIG : Path to configuration file TFSUMPY_DEBUG : Enable debug mode (set to \"1\" or \"true\")","title":"Environment Variables"}]}